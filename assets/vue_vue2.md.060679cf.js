import{_ as s,o as a,c as n,S as o}from"./chunks/framework.f15d8f8c.js";const d=JSON.parse('{"title":"Vue2","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vue2.md","filePath":"vue/vue2.md"}'),e={name:"vue/vue2.md"},l=o(`<h1 id="vue2" tabindex="-1">Vue2 <a class="header-anchor" href="#vue2" aria-label="Permalink to &quot;Vue2&quot;">​</a></h1><ol><li><h2 id="对于-mvvm-的理解" tabindex="-1">对于 MVVM 的理解？ <a class="header-anchor" href="#对于-mvvm-的理解" aria-label="Permalink to &quot;对于 MVVM 的理解？&quot;">​</a></h2></li></ol><p>MVVM 全称是 Model-View-ViewModel</p><p><strong>Model：</strong> 代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑。 <strong>View：</strong> 代表 UI 组件，它负责将数据模型转化成 UI 展现出来。 <strong>ViewModel：</strong> 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步 View 和 Model 的对象，连接 Model 和 View</p><p>在 MVVM 架构下，View 和 Model 之间并没有直接的联系，而是通过 ViewModel 进行交互，Model 和 ViewModel 之间的交互是双向的， 因此 View 数据的变化会同步到 Model 中，而 Model 数据的变化也会立即反应到 View 上</p><p>DOMListeners 和 DataBindings 是实现双向绑定的关键。DOMListeners 监听页面所有 View 层 DOM 元素的变化，当发生变化，Model 层的数据随之变化；DataBindings 监听 Model 层的数据，当数据发生变化，View 层的 DOM 元素随之变化</p><h2 id="_2-什么是-vue-生命周期" tabindex="-1">2. 什么是 vue 生命周期？ <a class="header-anchor" href="#_2-什么是-vue-生命周期" aria-label="Permalink to &quot;2. 什么是 vue 生命周期？&quot;">​</a></h2><p>Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载 Dom→ 渲染、更新 → 渲染、销毁等一系列过程，称之为 Vue 的生命周期</p><h2 id="_3-vue-生命周期的作用是什么" tabindex="-1">3. vue 生命周期的作用是什么？ <a class="header-anchor" href="#_3-vue-生命周期的作用是什么" aria-label="Permalink to &quot;3. vue 生命周期的作用是什么？&quot;">​</a></h2><p>它的生命周期中有多个事件钩子，让我们在控制整个 Vue 实例的过程时更容易形成好的逻辑</p><h2 id="_4-vue-生命周期总共有几个阶段" tabindex="-1">4. vue 生命周期总共有几个阶段？ <a class="header-anchor" href="#_4-vue-生命周期总共有几个阶段" aria-label="Permalink to &quot;4. vue 生命周期总共有几个阶段？&quot;">​</a></h2><p>它可以总共分为 8 个阶段：<code>创建前/后</code>, <code>载入前/后</code>,<code>更新前/后</code>,<code>销毁前/销毁后</code></p><h2 id="_5-第一次页面加载会触发哪几个钩子" tabindex="-1">5. 第一次页面加载会触发哪几个钩子？ <a class="header-anchor" href="#_5-第一次页面加载会触发哪几个钩子" aria-label="Permalink to &quot;5. 第一次页面加载会触发哪几个钩子？&quot;">​</a></h2><p><code>beforeCreate</code>, <code>created</code>, <code>beforeMount</code>, <code>mounted</code></p><h2 id="_6-dom-渲染在-哪个周期中就已经完成" tabindex="-1">6. DOM 渲染在 哪个周期中就已经完成？ <a class="header-anchor" href="#_6-dom-渲染在-哪个周期中就已经完成" aria-label="Permalink to &quot;6. DOM 渲染在 哪个周期中就已经完成？&quot;">​</a></h2><p>DOM 渲染在 mounted 中就已经完成了</p><h2 id="_7-说说声明周期的几个钩子和作用" tabindex="-1">7. 说说声明周期的几个钩子和作用？ <a class="header-anchor" href="#_7-说说声明周期的几个钩子和作用" aria-label="Permalink to &quot;7. 说说声明周期的几个钩子和作用？&quot;">​</a></h2><ul><li><strong>beforeCreate（创建前）</strong> 在数据观测和初始化事件还未开始</li><li><strong>created（创建后）</strong> 完成数据观测，属性和方法的运算，初始化事件，$el 属性还没有显示出来</li><li><strong>beforeMount（载入前）</strong> 在挂载开始之前被调用，相关的 render 函数首次被调用。实例已完成以下的配置：编译模板，把 data 里面的数据和模板生成 html。注意此时还没有挂载 html 到页面上。</li><li><strong>mounted（载入后</strong>） 在 el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的 html 内容替换 el 属性指向的 DOM 对象。完成模板中的 html 渲染到 html 页面中。此过程中进行 ajax 交互。</li><li><strong>beforeUpdate（更新前）</strong> 在数据更新之前调用，发生在虚拟 DOM 重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。</li><li><strong>updated（更新后）</strong> 在由于数据更改导致的虚拟 DOM 重新渲染和打补丁之后调用。调用时，组件 DOM 已经更新，所以可以执行依赖于 DOM 的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。</li><li><strong>beforeDestroy（销毁前）</strong> 在实例销毁之前调用。实例仍然完全可用。</li><li><strong>destroyed（销毁后）</strong> 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</li></ul><h2 id="_8-vue-实现数据双向绑定的原理" tabindex="-1">8. Vue 实现数据双向绑定的原理? <a class="header-anchor" href="#_8-vue-实现数据双向绑定的原理" aria-label="Permalink to &quot;8. Vue 实现数据双向绑定的原理?&quot;">​</a></h2><p>vue2.0 实现数据双向绑定主要是：采用数据劫持结合发布者-订阅者模式的方式，通过 <code>Object.defineProperty（）</code>来劫持各个属性的 setter、getter，在数据变动时发布消息给订阅者，触发相应监听回调</p><p>vue3.0 的话是采用 es6 <code>proxy</code> 新特性来实现数据双向绑定</p><p>vue 的数据双向绑定 将 MVVM 作为数据绑定的入口，整合 Observer，Compile 和 Watcher 三者，通过 Observer 来监听自己的 model 的数据变化，通过 Compile 来解析编译模板指令，最终利用 watcher 搭起 observer 和 Compile 之间的通信桥梁，达到数据变化 —&gt;视图更新；视图交互变化（input）—&gt;数据 model 变更双向绑定效果</p><h2 id="_9-vue-组件间的参数传递" tabindex="-1">9. Vue 组件间的参数传递 <a class="header-anchor" href="#_9-vue-组件间的参数传递" aria-label="Permalink to &quot;9. Vue 组件间的参数传递&quot;">​</a></h2><ul><li><strong>父组件传给子组件：</strong> 子组件通过 <code>props</code> 方法接受数据;</li><li><strong>子组件传给父组件：</strong> <code>$emit</code> 方法传递参数</li><li><strong>其他组件之间</strong> vuex</li></ul><h2 id="_10-vue-的路由实现-hash-模式-和-history-模式" tabindex="-1">10. Vue 的路由实现：hash 模式 和 history 模式 <a class="header-anchor" href="#_10-vue-的路由实现-hash-模式-和-history-模式" aria-label="Permalink to &quot;10. Vue 的路由实现：hash 模式 和 history 模式&quot;">​</a></h2><p><strong>hash 模式：</strong> 在浏览器中符号“#”，#以及#后面的字符称之为 hash，用 window.location.hash 读取； 特点：hash 虽然在 URL 中，但不被包括在 HTTP 请求中；用来指导浏览器动作，对服务端安全无用，hash 不会重加载页面</p><p><strong>history 模式：</strong> history 采用 HTML5 的新特性；且提供了两个新方法：<code>pushState()</code>，<code>replaceState()</code>可以对浏览器历史记录栈进行修改，以及 <code>popState</code> 事件的监听到状态变更</p><h2 id="_11-vue-路由的钩子函数" tabindex="-1">11. vue 路由的钩子函数 <a class="header-anchor" href="#_11-vue-路由的钩子函数" aria-label="Permalink to &quot;11. vue 路由的钩子函数&quot;">​</a></h2><p>首页可以控制导航跳转，beforeEach，afterEach 等，一般用于页面 title 的修改</p><h2 id="_12-vuex-是什么-怎么使用-哪种功能场景使用它" tabindex="-1">12. vuex 是什么？怎么使用？哪种功能场景使用它？ <a class="header-anchor" href="#_12-vuex-是什么-怎么使用-哪种功能场景使用它" aria-label="Permalink to &quot;12. vuex 是什么？怎么使用？哪种功能场景使用它？&quot;">​</a></h2><p>只用来读取的状态集中放在 store 中； 改变状态的方式是提交 mutations，这是个同步的事物； 异步逻辑应该封装在 action 中</p><p>在 main.js 引入 store，注入。新建了一个目录 store，….. export</p><p><strong>场景有：</strong> 单页应用中，组件之间的状态、音乐播放、登录状态、加入购物车</p><p><strong>state</strong></p><p>Vuex 使用单一状态树,即每个应用将仅仅包含一个 store 实例，但单一状态树和模块化并不冲突。存放的数据状态，不可以直接修改里面的数据。</p><p><strong>mutations</strong></p><p>mutations 定义的方法动态修改 Vuex 的 store 中的状态或数据。</p><p><strong>getters</strong></p><p>类似 vue 的计算属性，主要用来过滤一些数据。</p><p><strong>action</strong></p><p>actions 可以理解为通过将 mutations 里面处里数据的方法变成可异步的处理数据的方法，简单的说就是异步操作数据。view 层通过 store.dispath 来分发 action。</p><h2 id="_13-vue-cli-如何新增自定义指令" tabindex="-1">13. vue-cli 如何新增自定义指令？ <a class="header-anchor" href="#_13-vue-cli-如何新增自定义指令" aria-label="Permalink to &quot;13. vue-cli 如何新增自定义指令？&quot;">​</a></h2><p><strong>创建局部指令：</strong> directives</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">directives</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">fontweight</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">el</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">el</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">el</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><strong>创建全局指令：</strong> directive</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">directive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">fontweight</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">inserted</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">el</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">el</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">el</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="_14-vue-如何自定义一个过滤器" tabindex="-1">14. vue 如何自定义一个过滤器？ <a class="header-anchor" href="#_14-vue-如何自定义一个过滤器" aria-label="Permalink to &quot;14. vue 如何自定义一个过滤器？&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// html</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-model</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">msg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> msg | capitalize </span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 局部定义过滤器</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">el</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">filters</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">capitalize</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 全局定义过滤器</span></span>
<span class="line"><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">capitalize</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="_15-css-只在当前组件起作用" tabindex="-1">15. css 只在当前组件起作用 <a class="header-anchor" href="#_15-css-只在当前组件起作用" aria-label="Permalink to &quot;15. css 只在当前组件起作用&quot;">​</a></h2><p>在 style 标签中写入 scoped</p><h2 id="_16-v-if-和-v-show-区别" tabindex="-1">16. v-if 和 v-show 区别 <a class="header-anchor" href="#_16-v-if-和-v-show-区别" aria-label="Permalink to &quot;16. v-if 和 v-show 区别&quot;">​</a></h2><p>v-if 按照条件是否渲染，v-show 是 display 的 block 或 none</p><h2 id="_17-route-和-router-的区别" tabindex="-1">17. <code>$route</code> 和 <code>$router</code> 的区别 <a class="header-anchor" href="#_17-route-和-router-的区别" aria-label="Permalink to &quot;17. \`$route\` 和 \`$router\` 的区别&quot;">​</a></h2><p>$route是“路由信息对象”，包括path，params，hash，query，fullPath，matched，name等路由信息参数。而$router 是“路由实例”对象包括了路由的跳转方法，钩子函数等</p><h2 id="_18-vue-js-的两个核心是什么" tabindex="-1">18. vue.js 的两个核心是什么？ <a class="header-anchor" href="#_18-vue-js-的两个核心是什么" aria-label="Permalink to &quot;18. vue.js 的两个核心是什么？&quot;">​</a></h2><p>数据驱动、组件系统</p><h2 id="_19-vue-几种常用的指令" tabindex="-1">19. vue 几种常用的指令 <a class="header-anchor" href="#_19-vue-几种常用的指令" aria-label="Permalink to &quot;19. vue 几种常用的指令&quot;">​</a></h2><p>v-for 、 v-if 、v-bind、v-on、v-show、v-else</p><h2 id="_20-vue-常用的修饰符" tabindex="-1">20. vue 常用的修饰符？ <a class="header-anchor" href="#_20-vue-常用的修饰符" aria-label="Permalink to &quot;20. vue 常用的修饰符？&quot;">​</a></h2><ul><li><strong>.prevent:</strong> 提交事件不再重载页面</li><li><strong>.stop:</strong> 阻止单击事件冒泡</li><li><strong>.self:</strong> 当事件发生在该元素本身而不是子元素的时候会触发</li><li><strong>.capture:</strong> 事件侦听，事件发生的时候会调用</li></ul>`,60),p=[l];function t(r,c,i,D,y,F){return a(),n("div",null,p)}const h=s(e,[["render",t]]);export{d as __pageData,h as default};
