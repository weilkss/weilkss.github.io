import{_ as a,o as e,c as t,X as r}from"./chunks/framework.6e839c56.js";const b=JSON.parse('{"title":"React","description":"","frontmatter":{},"headers":[],"relativePath":"react/index.md","filePath":"react/index.md"}'),i={name:"react/index.md"},o=r('<h1 id="react" tabindex="-1">React <a class="header-anchor" href="#react" aria-label="Permalink to &quot;React&quot;">​</a></h1><h2 id="_1-react18-有哪些更新" tabindex="-1">1.React18 有哪些更新？ <a class="header-anchor" href="#_1-react18-有哪些更新" aria-label="Permalink to &quot;1.React18 有哪些更新？&quot;">​</a></h2><h2 id="_2-jsx-是什么-它和-js-有什么区别" tabindex="-1">2.JSX 是什么，它和 JS 有什么区别 <a class="header-anchor" href="#_2-jsx-是什么-它和-js-有什么区别" aria-label="Permalink to &quot;2.JSX 是什么，它和 JS 有什么区别&quot;">​</a></h2><h2 id="_3-简述-react-的生命周期" tabindex="-1">3.简述 React 的生命周期 <a class="header-anchor" href="#_3-简述-react-的生命周期" aria-label="Permalink to &quot;3.简述 React 的生命周期&quot;">​</a></h2><h2 id="_4-react-事件机制和原生-dom-事件流有什么区别" tabindex="-1">4.React 事件机制和原生 DOM 事件流有什么区别 <a class="header-anchor" href="#_4-react-事件机制和原生-dom-事件流有什么区别" aria-label="Permalink to &quot;4.React 事件机制和原生 DOM 事件流有什么区别&quot;">​</a></h2><h2 id="_5-redux-工作原理" tabindex="-1">5.Redux 工作原理 <a class="header-anchor" href="#_5-redux-工作原理" aria-label="Permalink to &quot;5.Redux 工作原理&quot;">​</a></h2><h2 id="_6-react-router-工作原理-react-router-dom-有哪些组件" tabindex="-1">6.React-Router 工作原理? react-router-dom 有哪些组件 <a class="header-anchor" href="#_6-react-router-工作原理-react-router-dom-有哪些组件" aria-label="Permalink to &quot;6.React-Router 工作原理? react-router-dom 有哪些组件&quot;">​</a></h2><h2 id="_7-react-hooks-解决了什么问题-函数组件与类组件的区别" tabindex="-1">7.React hooks 解决了什么问题? 函数组件与类组件的区别 <a class="header-anchor" href="#_7-react-hooks-解决了什么问题-函数组件与类组件的区别" aria-label="Permalink to &quot;7.React hooks 解决了什么问题? 函数组件与类组件的区别&quot;">​</a></h2><h2 id="_8-setstate-是同步还是异步的-setstate-做了什么" tabindex="-1">8.setState 是同步还是异步的，setState 做了什么 <a class="header-anchor" href="#_8-setstate-是同步还是异步的-setstate-做了什么" aria-label="Permalink to &quot;8.setState 是同步还是异步的，setState 做了什么&quot;">​</a></h2><h2 id="_9-什么是-fiber-fiber-解决了什么问题" tabindex="-1">9.什么是 fiber，fiber 解决了什么问题 <a class="header-anchor" href="#_9-什么是-fiber-fiber-解决了什么问题" aria-label="Permalink to &quot;9.什么是 fiber，fiber 解决了什么问题&quot;">​</a></h2><h2 id="_10-react-中在哪捕获错误" tabindex="-1">10.React 中在哪捕获错误？ <a class="header-anchor" href="#_10-react-中在哪捕获错误" aria-label="Permalink to &quot;10.React 中在哪捕获错误？&quot;">​</a></h2><h2 id="_11-react-组件传值有哪些方式" tabindex="-1">11.React 组件传值有哪些方式 <a class="header-anchor" href="#_11-react-组件传值有哪些方式" aria-label="Permalink to &quot;11.React 组件传值有哪些方式&quot;">​</a></h2><h2 id="_12-react-无状态组件和-class-类组件的区别" tabindex="-1">12.react 无状态组件和 class 类组件的区别 <a class="header-anchor" href="#_12-react-无状态组件和-class-类组件的区别" aria-label="Permalink to &quot;12.react 无状态组件和 class 类组件的区别&quot;">​</a></h2><h2 id="_13-react-如何做到和-vue-中-keep-alive-的缓存效果" tabindex="-1">13.react 如何做到和 vue 中 keep-alive 的缓存效果 <a class="header-anchor" href="#_13-react-如何做到和-vue-中-keep-alive-的缓存效果" aria-label="Permalink to &quot;13.react 如何做到和 vue 中 keep-alive 的缓存效果&quot;">​</a></h2><h2 id="_14-react-如何做路由监听" tabindex="-1">14.React 如何做路由监听 <a class="header-anchor" href="#_14-react-如何做路由监听" aria-label="Permalink to &quot;14.React 如何做路由监听&quot;">​</a></h2><h2 id="_15-react-有哪几种方式改变-state" tabindex="-1">15.React 有哪几种方式改变 state <a class="header-anchor" href="#_15-react-有哪几种方式改变-state" aria-label="Permalink to &quot;15.React 有哪几种方式改变 state&quot;">​</a></h2><h2 id="_16-react-有哪几种创建组件方法" tabindex="-1">16.React 有哪几种创建组件方法 <a class="header-anchor" href="#_16-react-有哪几种创建组件方法" aria-label="Permalink to &quot;16.React 有哪几种创建组件方法&quot;">​</a></h2><h2 id="_17-react-中-props-和-state-有什么区别" tabindex="-1">17.react 中 props 和 state 有什么区别 <a class="header-anchor" href="#_17-react-中-props-和-state-有什么区别" aria-label="Permalink to &quot;17.react 中 props 和 state 有什么区别&quot;">​</a></h2><h2 id="_18-react-中-keys-的作用是什么" tabindex="-1">18.React 中 keys 的作用是什么？ <a class="header-anchor" href="#_18-react-中-keys-的作用是什么" aria-label="Permalink to &quot;18.React 中 keys 的作用是什么？&quot;">​</a></h2><h2 id="_19-react-中-refs-的作用是什么" tabindex="-1">19.React 中 refs 的作用是什么？ <a class="header-anchor" href="#_19-react-中-refs-的作用是什么" aria-label="Permalink to &quot;19.React 中 refs 的作用是什么？&quot;">​</a></h2><h2 id="_20-react-diff-原理" tabindex="-1">20.React diff 原理 <a class="header-anchor" href="#_20-react-diff-原理" aria-label="Permalink to &quot;20.React diff 原理&quot;">​</a></h2><p>React 的 diff 原理，也称为虚拟 DOM 的差异化比较算法，是 React 性能优化的核心机制之一。该原理通过对比新旧虚拟 DOM 树的差异，最小化对真实 DOM 的操作，从而提高页面渲染的性能。以下是 React diff 原理的详细解析：</p><h3 id="一、基本概念" tabindex="-1">一、基本概念 <a class="header-anchor" href="#一、基本概念" aria-label="Permalink to &quot;一、基本概念&quot;">​</a></h3><ul><li>虚拟 DOM（Virtual DOM）：React 使用虚拟 DOM 来表示真实 DOM 树的状态。虚拟 DOM 是一个轻量级的 JavaScript 对象，它模拟了真实 DOM 的结构和属性。</li><li>diff 算法：diff 算法是 React 用于比较新旧虚拟 DOM 树，找出差异并生成更新补丁的算法。</li></ul><h3 id="二、diff-原理的具体步骤" tabindex="-1">二、diff 原理的具体步骤 <a class="header-anchor" href="#二、diff-原理的具体步骤" aria-label="Permalink to &quot;二、diff 原理的具体步骤&quot;">​</a></h3><p><strong>对比根节点：</strong></p><ul><li>React 首先比较新旧虚拟 DOM 树的根节点。</li><li>如果根节点类型不同，React 将完全替换整个子树。</li><li>如果根节点类型相同，React 将继续对比子节点。</li></ul><p><strong>对比子节点：</strong></p><ul><li>React 会逐层对比新旧虚拟 DOM 树的子节点。</li><li>使用唯一的 key 属性来标识列表中的每个子节点，并在同级节点中进行比较。</li><li>如果某个子节点在新旧虚拟 DOM 树中的相同位置，且其 key 和类型相同，则认为是相同节点，不进行更深层次的比较。</li><li>如果某个子节点在新旧虚拟 DOM 树中的相同位置，但其 key 或类型不同，则认为是不同节点，需要替换或重新创建。</li></ul><p><strong>递归对比子节点：</strong></p><ul><li>如果某个同级节点是相同节点，React 将继续递归对比其子节点。</li><li>React 会记录新旧虚拟 DOM 树中相同位置的第一个子节点为起始点，并向右依次对比每个子节点。</li><li>当遇到不同节点时，则停止对比该节点及其后续节点。</li></ul><p><strong>更新和删除节点：</strong></p><ul><li>根据比较结果，React 可以确定需要更新、替换或删除的节点。</li><li>对于需要更新的节点，React 会更新其属性和内容。</li><li>对于需要替换的节点，React 会创建新的 DOM 节点来替换旧节点。</li><li>对于需要删除的节点，React 会从真实 DOM 中移除对应的节点。</li></ul><h3 id="三、diff-原理的优化策略" tabindex="-1">三、diff 原理的优化策略 <a class="header-anchor" href="#三、diff-原理的优化策略" aria-label="Permalink to &quot;三、diff 原理的优化策略&quot;">​</a></h3><p><strong>树层级（Tree Diff）：</strong></p><ul><li>React 的 diff 算法会对树进行分层比较，即只比较同一层次的节点。</li><li>如果发现某个节点已经不存在，则该节点及其子节点会被完全删除，不会用于进一步的比较。</li></ul><p><strong>组件层级（Component Diff）：</strong></p><ul><li>对于同一类型的组件（引用一致），React 会按照原策略继续比较其 virtual DOM tree。</li><li>如果不是同一类型的组件，React 会将该组件判断为 dirty component，从而替换整个组件下的所有子节点。</li></ul><p><strong>元素层级（Element Diff）：</strong></p><ul><li>当节点处于同一层级时，React 提供了三种节点操作：INSERT_MARKUP（插入）、MOVE_EXISTING（移动）和 REMOVE_NODE（删除）。</li><li>通过唯一 key 可以判断新老集合中是否存在相同的节点，并据此决定是执行插入、移动还是删除操作。</li></ul><h3 id="四、总结" tabindex="-1">四、总结 <a class="header-anchor" href="#四、总结" aria-label="Permalink to &quot;四、总结&quot;">​</a></h3><p>React 的 diff 原理通过对比新旧虚拟 DOM 树的差异，并最小化对真实 DOM 的操作，从而提高了页面渲染的性能。这一原理的实现依赖于虚拟 DOM 的概念和 diff 算法的优化策略，包括树层级、组件层级和元素层级的比较和优化。通过使用 key 属性来标识列表中的每个子节点，React 能够更高效地复用和更新 DOM 节点，减少了不必要的 DOM 操作，提升了页面性能和用户体验。</p><h2 id="_21-受控组件和非受控组件有什么区别" tabindex="-1">21.受控组件和非受控组件有什么区别？ <a class="header-anchor" href="#_21-受控组件和非受控组件有什么区别" aria-label="Permalink to &quot;21.受控组件和非受控组件有什么区别？&quot;">​</a></h2><h2 id="_22-为什么虚拟-dom-会提高性能" tabindex="-1">22.为什么虚拟 dom 会提高性能? <a class="header-anchor" href="#_22-为什么虚拟-dom-会提高性能" aria-label="Permalink to &quot;22.为什么虚拟 dom 会提高性能?&quot;">​</a></h2><h2 id="_23-为什么不能在条件语句中写-hook" tabindex="-1">23.为什么不能在条件语句中写 hook <a class="header-anchor" href="#_23-为什么不能在条件语句中写-hook" aria-label="Permalink to &quot;23.为什么不能在条件语句中写 hook&quot;">​</a></h2><h2 id="_24-react-forwardref-是什么及其作用" tabindex="-1">24.React.forwardRef 是什么及其作用 <a class="header-anchor" href="#_24-react-forwardref-是什么及其作用" aria-label="Permalink to &quot;24.React.forwardRef 是什么及其作用&quot;">​</a></h2><h2 id="_25-什么是高阶组件-hoc" tabindex="-1">25.什么是高阶组件 HOC <a class="header-anchor" href="#_25-什么是高阶组件-hoc" aria-label="Permalink to &quot;25.什么是高阶组件 HOC&quot;">​</a></h2><h2 id="_26-受控组件和非受控组件" tabindex="-1">26.受控组件和非受控组件 <a class="header-anchor" href="#_26-受控组件和非受控组件" aria-label="Permalink to &quot;26.受控组件和非受控组件&quot;">​</a></h2>',48),l=[o];function c(h,d,s,n,f,u){return e(),t("div",null,l)}const q=a(i,[["render",c]]);export{b as __pageData,q as default};
